version: '3.8'

services:
  # VS Code Server (Replaces Replit IDE)
  code-server:
    image: codercom/code-server:latest
    container_name: mo-code-server
    environment:
      - PASSWORD=mo-dev-2025
    volumes:
      - ./workspace:/home/coder/workspace
      - ~/.config:/home/coder/.config
    ports:
      - "8443:8080"
    restart: unless-stopped

  # Gitea (Replaces GitHub Integration)  
  gitea:
    image: gitea/gitea:latest
    container_name: mo-gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea123
    restart: unless-stopped
    volumes:
      - gitea-data:/data
      #- /etc/timezone:/etc/timezone:ro
      #- /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "222:22"
    depends_on:
      - postgres

  # PostgreSQL (Replaces Replit Database)
  postgres:
    image: postgres:15
    container_name: mo-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=mo_development
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # pgAdmin (Database Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mo-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@localhost.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  # Drone CI/CD (Replaces Replit Deployments)
  drone:
    image: drone/drone:latest
    container_name: mo-drone
    restart: unless-stopped
    environment:
      - DRONE_GITEA_SERVER=http://gitea:3000
      - DRONE_GITEA_CLIENT_ID=drone
      - DRONE_GITEA_CLIENT_SECRET=drone_secret
      - DRONE_RPC_SECRET=super-secret-rpc-key
      - DRONE_SERVER_HOST=localhost:8080
      - DRONE_SERVER_PROTO=http
    volumes:
      - drone-data:/data
    ports:
      - "8080:80"
    depends_on:
      - gitea

  # Drone Runner
  drone-runner:
    image: drone/drone-runner-docker:latest
    container_name: mo-drone-runner
    restart: unless-stopped
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=super-secret-rpc-key
      - DRONE_RUNNER_CAPACITY=2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone

  # HashiCorp Vault (Replaces Replit Secrets)
  vault:
    image: hashicorp/vault:latest
    container_name: mo-vault
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=mo-vault-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
    ports:
      - "8200:8200"

  # Docker Registry (Private Package Registry)
  registry:
    image: registry:2
    container_name: mo-registry
    restart: unless-stopped
    environment:
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
    volumes:
      - registry-data:/var/lib/registry
      - ./auth:/auth
    ports:
      - "5000:5000"

  # Nginx Reverse Proxy (Replaces Replit Hosting)
  nginx:
    image: nginx:alpine
    container_name: mo-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - code-server
      - gitea
      - drone
      - pgadmin

  # Redis (Caching and Sessions)
  redis:
    image: redis:7-alpine
    container_name: mo-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  # Tor Proxy (Anonymous Access)
  tor:
    image: dperson/torproxy:latest
    container_name: mo-tor
    restart: unless-stopped
    ports:
      - "9050:9050"
      - "9051:9051"
    environment:
      - PASSWORD=tor123

  # Monitoring with Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: mo-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

volumes:
  gitea-data:
  postgres-data:
  pgadmin-data:
  drone-data:
  vault-data:
  registry-data:
  redis-data:
  portainer-data:

networks:
  default:
    name: mo-dev-network
